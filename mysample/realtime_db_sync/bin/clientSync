#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require 'net/http'
require 'uri'
require 'open-uri'
require 'fileutils'
require 'libdb'
require 'libutil'

SERVER_HOST='localhost'

def getValue( username, key )
  uri = URI.parse("http://#{SERVER_HOST}:8081/getValue?username=#{username}")
  ret = ""
  Net::HTTP.start(uri.host, uri.port) do |http|
    http.post(uri.request_uri, key, {"content-type" => "plain/text"}) { |str|
      puts [ "getValue's posponse is", str ]
      ret = str
    }
  end
  ret
end

def sync_db( username )
  puts "sync db..."
  masterList = open( sprintf( "http://#{SERVER_HOST}:8081/getList?username=%s", username ), "r" ) {|f|
    f.readlines.map { |x| x.chomp }
  }
  # open local db
  localdb = DBSync::LocalDB.new( File.expand_path( "~/.localdb/" ) + "/" )
  localdb.open( username )

  # calc difference between master and local.
  localList = localdb.getList() 
  util = DBSync::Util.new
  diffList = util.diffList( masterList, localList )

  diffList.each {|key|
    puts "key: #{key}"
    value = getValue( username, key )
    puts "value: #{value}"
    localdb.insertValue( key.dup, value.dup )
  }
  localdb.close()
end

def record_exist?( username, key )
  # open local db
  localdb = DBSync::LocalDB.new( File.expand_path( "~/.localdb/" ) + "/" )
  localdb.open( username )
  ret = localdb.getValue( key, nil )
  localdb.close()
  ret
end

def wait_notify( username )
  begin
    uri = URI.parse("http://localhost:8080/?username=#{username}")
    Net::HTTP.start(uri.host, uri.port) do |http|
      request = Net::HTTP::Get.new(uri.request_uri)
      http.request(request) do |response|
        raise 'Response is not chuncked' unless response.chunked?
        response.read_body do |chunk|
          key = chunk.chomp
          if record_exist?( username, key )
            puts "exist:#{key}"
          else
            puts "sync!:#{key}"
            return chunk.chomp
          end
        end
      end
    end
  rescue Timeout::Error => e
    return :timeout
  end
end


def main
  if 1 > ARGV.length
    puts "usage: clientdb.rb [USERNAME]"
    exit 1
  end
  while true
    result = wait_notify( ARGV[0] )
    case result
    when :timeout
      puts "timeout..."
    else
      sync_db( ARGV[0] )
    end
  end
end

main
